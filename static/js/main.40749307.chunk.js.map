{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAIaA,EAAO,SAAAC,GAChB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,mCAAOL,EAAMG,QAAQG,QACrB,mCAAON,EAAMG,QAAQI,aCHhBC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLtBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACIZ,UAAW,SACXa,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCqCJG,E,kDAxCb,aAAc,IAAD,8BACX,gBAQFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAPrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAc,IALL,E,qDAcb,WAAqB,IAAD,OAClBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAG7C,WACE,MAA+BC,KAAKN,MAA7Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC/CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGjD,OACE,sBAAK9B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACIW,YAAY,iBACZC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAlCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.40749307.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.style.css';\n\n\nexport const Card = props => {\n    return(\n    <div className='card-container'>\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n        <h1> { props.monster.name}</h1>\n        <h2> { props.monster.email}</h2>\n\n    </div>)\n}","import React from \"react\";\nimport {Card} from \"../card/card.component\";\n\nimport './card-list.style.css';\n\n\nexport const CardList = props => {\n    return(\n        <div className='card-list'>\n            {props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster}/>\n            ))}\n        </div>\n    )\n}","import React from \"react\";\n\nimport './search-box.style.css';\n\n\nexport const SearchBox = ({placeholder,handleChange}) => (\n    <input\n        className= 'search'\n        type=\"search\"\n        placeholder={placeholder}\n        onChange= {handleChange}\n    />\n)","import './App.css';\nimport {Component} from \"react\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.components\"\n\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField : ''\n    }\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({monsters:users}))\n  }\n\n  render () {\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n     monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <h1> MostroMondo </h1>\n        <SearchBox\n            placeholder='Search Monster'\n            handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}